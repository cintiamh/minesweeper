// Generated by CoffeeScript 1.6.2
(function() {
  var REFRESH_RATE, TILE_SIZE, bombs, bombs_list, canvas, context, convert_num_to_time, drawBomb, drawFlag, drawWrong, draw_character, draw_down_button, draw_line, draw_square_back, draw_table, draw_up_button, exploded, fix_decimal, flags_list, flipped_list, generate_bombs, getMousePos, get_neighbors, height, level, levels, mouse_pos, num_colors, running, set_new_level, start_game, time, width, won;

  TILE_SIZE = 30;

  REFRESH_RATE = 120;

  running = false;

  exploded = false;

  won = false;

  time = 0;

  level = 0;

  width = 0;

  height = 0;

  bombs = 0;

  bombs_list = [];

  flags_list = [];

  flipped_list = [];

  mouse_pos = {};

  levels = [
    {
      x: 8,
      y: 8,
      bombs: 10
    }, {
      x: 16,
      y: 16,
      bombs: 40
    }, {
      x: 31,
      y: 16,
      bombs: 99
    }
  ];

  num_colors = ["#0000FF", "#008040", "#FF0000", "#000080", "#800040", "#408080", "#000000", "#808080"];

  canvas = $("canvas")[0];

  context = canvas.getContext("2d");

  /*
  # Drawing Functions
  */


  draw_line = function(start_x, start_y, end_x, end_y, color, line_width) {
    context.beginPath();
    context.moveTo(start_x, start_y);
    context.lineTo(end_x, end_y);
    context.lineWidth = line_width;
    context.strokeStyle = color;
    return context.stroke();
  };

  draw_square_back = function(x, y) {
    context.beginPath();
    context.rect(x * TILE_SIZE, y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
    context.fillStyle = "#BDBDBD";
    return context.fill();
  };

  draw_up_button = function(x, y) {
    var line_width;

    draw_square_back(x, y);
    line_width = 3;
    draw_line(x * TILE_SIZE, y * TILE_SIZE + line_width / 2, (x + 1) * TILE_SIZE, (y * TILE_SIZE) + line_width / 2, "#FFFFFF", line_width);
    draw_line(x * TILE_SIZE + line_width / 2, y * TILE_SIZE, x * TILE_SIZE + line_width / 2, (y + 1) * TILE_SIZE, "#FFFFFF", line_width);
    draw_line((x + 1) * TILE_SIZE - line_width / 2, (y + 1) * TILE_SIZE, (x + 1) * TILE_SIZE - line_width / 2, y * TILE_SIZE, "#7B7B7B", line_width);
    return draw_line((x + 1) * TILE_SIZE, (y + 1) * TILE_SIZE - line_width / 2, x * TILE_SIZE, (y + 1) * TILE_SIZE - line_width / 2, "#7B7B7B", line_width);
  };

  draw_down_button = function(x, y) {
    var line_width;

    draw_square_back(x, y);
    line_width = 1;
    draw_line(x * TILE_SIZE, y * TILE_SIZE, (x + 1) * TILE_SIZE, y * TILE_SIZE, "#7B7B7B", line_width);
    draw_line(x * TILE_SIZE, y * TILE_SIZE, x * TILE_SIZE, (y + 1) * TILE_SIZE, "#7B7B7B", line_width);
    draw_line((x + 1) * TILE_SIZE, (y + 1) * TILE_SIZE, (x + 1) * TILE_SIZE, y * TILE_SIZE, "#7B7B7B", line_width);
    return draw_line((x + 1) * TILE_SIZE, (y + 1) * TILE_SIZE, x * TILE_SIZE, (y + 1) * TILE_SIZE, "#7B7B7B", line_width);
  };

  draw_character = function(x, y, letter, color) {
    context.beginPath();
    context.font = "bold 18pt Arial";
    context.fillStyle = color;
    context.lineWidth = 2;
    return context.fillText(letter, x * TILE_SIZE + 7, (y + 1) * TILE_SIZE - 6);
  };

  drawBomb = function(x, y) {
    context.beginPath();
    context.arc((x + 0.5) * TILE_SIZE, (y + 0.5) * TILE_SIZE, TILE_SIZE * 0.3, 0, 2 * Math.PI, false);
    context.fillStyle = "#000000";
    context.fill();
    context.moveTo((x + 0.5) * TILE_SIZE, (y + 0.05) * TILE_SIZE);
    context.lineTo((x + 0.5) * TILE_SIZE, (y + 0.95) * TILE_SIZE);
    context.moveTo((x + 0.05) * TILE_SIZE, (y + 0.5) * TILE_SIZE);
    context.lineTo((x + 0.95) * TILE_SIZE, (y + 0.5) * TILE_SIZE);
    context.moveTo((x + 0.16) * TILE_SIZE, (y + 0.16) * TILE_SIZE);
    context.lineTo((x + 0.83) * TILE_SIZE, (y + 0.83) * TILE_SIZE);
    context.moveTo((x + 0.83) * TILE_SIZE, (y + 0.16) * TILE_SIZE);
    context.lineTo((x + 0.16) * TILE_SIZE, (y + 0.83) * TILE_SIZE);
    context.lineWidth = 2;
    context.strokeStyle = "#000000";
    context.stroke();
    context.beginPath();
    context.arc((x + 0.35) * TILE_SIZE, (y + 0.35) * TILE_SIZE, TILE_SIZE * 0.1, 0, 2 * Math.PI, false);
    context.fillStyle = "#FFFFFF";
    return context.fill();
  };

  drawWrong = function(x, y) {
    context.beginPath();
    context.moveTo(x * TILE_SIZE, y * TILE_SIZE);
    context.lineTo((x + 1) * TILE_SIZE, (y + 1) * TILE_SIZE);
    context.moveTo((x + 1) * TILE_SIZE, y * TILE_SIZE);
    context.lineTo(x * TILE_SIZE, (y + 1) * TILE_SIZE);
    context.lineWidth = 2;
    context.strokeStyle = "#FF0000";
    return context.stroke();
  };

  drawFlag = function(x, y) {
    context.beginPath();
    context.moveTo((x + 0.5) * TILE_SIZE, (y + 0.5) * TILE_SIZE);
    context.lineTo((x + 0.5) * TILE_SIZE, (y + 0.9) * TILE_SIZE);
    context.lineWidth = 2;
    context.strokeStyle = "#000000";
    context.stroke();
    context.beginPath();
    context.moveTo((x + 0.55) * TILE_SIZE, (y + 0.1) * TILE_SIZE);
    context.lineTo((x + 0.55) * TILE_SIZE, (y + 0.55) * TILE_SIZE);
    context.lineTo((x + 0.1) * TILE_SIZE, (y + 0.3) * TILE_SIZE);
    context.closePath();
    context.fillStyle = "#FF0000";
    context.fill();
    context.beginPath();
    context.moveTo((x + 0.4) * TILE_SIZE, (y + 0.7) * TILE_SIZE);
    context.lineTo((x + 0.6) * TILE_SIZE, (y + 0.7) * TILE_SIZE);
    context.lineTo((x + 0.6) * TILE_SIZE, (y + 0.8) * TILE_SIZE);
    context.lineTo((x + 0.4) * TILE_SIZE, (y + 0.8) * TILE_SIZE);
    context.closePath();
    context.fillStyle = "#000000";
    context.fill();
    context.beginPath();
    context.moveTo((x + 0.3) * TILE_SIZE, (y + 0.8) * TILE_SIZE);
    context.lineTo((x + 0.7) * TILE_SIZE, (y + 0.8) * TILE_SIZE);
    context.lineTo((x + 0.7) * TILE_SIZE, (y + 0.9) * TILE_SIZE);
    context.lineTo((x + 0.3) * TILE_SIZE, (y + 0.9) * TILE_SIZE);
    context.closePath();
    context.fillStyle = "#000000";
    return context.fill();
  };

  draw_table = function() {
    var posx, posy, _i, _ref, _results;

    context.beginPath();
    context.rect(0, 0, width, height);
    context.fillStyle = "#BDBDBD";
    context.fill();
    _results = [];
    for (posx = _i = 0, _ref = levels[level].x; 0 <= _ref ? _i <= _ref : _i >= _ref; posx = 0 <= _ref ? ++_i : --_i) {
      _results.push((function() {
        var _j, _ref1, _results1;

        _results1 = [];
        for (posy = _j = 0, _ref1 = levels[level].y; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; posy = 0 <= _ref1 ? ++_j : --_j) {
          _results1.push(draw_up_button(posx, posy));
        }
        return _results1;
      })());
    }
    return _results;
  };

  /*
  # Game Functions
  */


  generate_bombs = function(x, y) {
    var new_x, new_y, _results;

    bombs_list = [];
    bombs = 0;
    _results = [];
    while (bombs < levels[level].bombs) {
      new_x = Math.floor(Math.random() * levels[level].x);
      _results.push(new_y = Math.floor(Math.random() * levels[level].y));
    }
    return _results;
  };

  getMousePos = function(canvas, evt) {
    var rect;

    rect = canvas.getBoundingClientRect();
    return {
      x: Math.floor((evt.clientX - rect.left) / TILE_SIZE),
      y: Math.floor((evt.clientY - rect.top) / TILE_SIZE)
    };
  };

  get_neighbors = function(x, y) {
    return [
      {
        x: x - 1,
        y: y - 1
      }, {
        x: x - 1,
        y: y
      }, {
        x: x - 1,
        y: y + 1
      }, {
        x: x,
        y: y - 1
      }, {
        x: x,
        y: y + 1
      }, {
        x: x + 1,
        y: y - 1
      }, {
        x: x + 1,
        y: y
      }, {
        x: x + 1,
        y: y + 1
      }
    ];
  };

  fix_decimal = function(num) {
    if (!(num >= 10)) {
      return "0" + num;
    }
    return num;
  };

  convert_num_to_time = function(num) {
    var hor, min, sec;

    sec = fix_decimal(Math.floor(num % 60));
    min = fix_decimal(Math.floor(num / 60));
    hor = fix_decimal(Math.floor(num / (60 * 60)));
    return hor + ":" + min + ":" + sec;
  };

  set_new_level = function(val) {
    level = val;
    width = levels[level].x * TILE_SIZE;
    height = levels[level].y * TILE_SIZE;
    bombs = levels[level].bombs;
    canvas.width = width;
    return canvas.height = height;
  };

  start_game = function() {
    running = true;
    exploded = false;
    won = false;
    time = 0;
    draw_table();
    $(".message").text("");
    return $("#time").text(convert_num_to_time(time));
  };

  $('canvas').mousedown(function(event) {
    if (event.which === 1) {
      return console.log("left click");
    } else if (event.which === 3) {
      return console.log("right click");
    }
  });

  set_new_level(0);

  start_game();

}).call(this);
